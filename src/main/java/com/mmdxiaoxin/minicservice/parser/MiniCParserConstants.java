/* Generated By:JJTree&JavaCC: Do not edit this line. MiniCParserConstants.java */
package com.mmdxiaoxin.minicservice.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface MiniCParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 7;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 8;
  /** RegularExpression Id. */
  int HEX_LITERAL = 9;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 10;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 11;
  /** RegularExpression Id. */
  int EXPONENT = 12;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 13;
  /** RegularExpression Id. */
  int STRING_LITERAL = 14;
  /** RegularExpression Id. */
  int WHILE = 15;
  /** RegularExpression Id. */
  int IF = 16;
  /** RegularExpression Id. */
  int ELSE = 17;
  /** RegularExpression Id. */
  int INT = 18;
  /** RegularExpression Id. */
  int RETURN = 19;
  /** RegularExpression Id. */
  int VOID = 20;
  /** RegularExpression Id. */
  int MAIN = 21;
  /** RegularExpression Id. */
  int FOR = 22;
  /** RegularExpression Id. */
  int DO = 23;
  /** RegularExpression Id. */
  int SWITCH = 24;
  /** RegularExpression Id. */
  int CASE = 25;
  /** RegularExpression Id. */
  int BREAK = 26;
  /** RegularExpression Id. */
  int CONTINUE = 27;
  /** RegularExpression Id. */
  int GOTO = 28;
  /** RegularExpression Id. */
  int SIZEOF = 29;
  /** RegularExpression Id. */
  int TYPEDEF = 30;
  /** RegularExpression Id. */
  int STRUCT = 31;
  /** RegularExpression Id. */
  int UNION = 32;
  /** RegularExpression Id. */
  int ENUM = 33;
  /** RegularExpression Id. */
  int REGISTER = 34;
  /** RegularExpression Id. */
  int AUTO = 35;
  /** RegularExpression Id. */
  int EXTERN = 36;
  /** RegularExpression Id. */
  int STATIC = 37;
  /** RegularExpression Id. */
  int CONST = 38;
  /** RegularExpression Id. */
  int VOLATILE = 39;
  /** RegularExpression Id. */
  int SIGNED = 40;
  /** RegularExpression Id. */
  int UNSIGNED = 41;
  /** RegularExpression Id. */
  int SHORT = 42;
  /** RegularExpression Id. */
  int LONG = 43;
  /** RegularExpression Id. */
  int FLOAT = 44;
  /** RegularExpression Id. */
  int DOUBLE = 45;
  /** RegularExpression Id. */
  int CHAR = 46;
  /** RegularExpression Id. */
  int DFLT = 47;
  /** RegularExpression Id. */
  int _NUM_CHAR = 48;
  /** RegularExpression Id. */
  int _ESCAPED_CHAR = 49;
  /** RegularExpression Id. */
  int _TERM_START_CHAR = 50;
  /** RegularExpression Id. */
  int _TERM_CHAR = 51;
  /** RegularExpression Id. */
  int _WHITESPACE = 52;
  /** RegularExpression Id. */
  int ADD = 53;
  /** RegularExpression Id. */
  int SUBTRACT = 54;
  /** RegularExpression Id. */
  int MULTIPLY = 55;
  /** RegularExpression Id. */
  int DIVIDE = 56;
  /** RegularExpression Id. */
  int MODULO = 57;
  /** RegularExpression Id. */
  int ASSIGN = 58;
  /** RegularExpression Id. */
  int PLUS_ASSIGN = 59;
  /** RegularExpression Id. */
  int MINUS_ASSIGN = 60;
  /** RegularExpression Id. */
  int MUL_ASSIGN = 61;
  /** RegularExpression Id. */
  int DIV_ASSIGN = 62;
  /** RegularExpression Id. */
  int MOD_ASSIGN = 63;
  /** RegularExpression Id. */
  int LESS_THAN = 64;
  /** RegularExpression Id. */
  int LESS_THAN_EQUAL = 65;
  /** RegularExpression Id. */
  int GREATER_THAN = 66;
  /** RegularExpression Id. */
  int GREATER_THAN_EQUAL = 67;
  /** RegularExpression Id. */
  int NOT_EQUAL = 68;
  /** RegularExpression Id. */
  int OR = 69;
  /** RegularExpression Id. */
  int AND = 70;
  /** RegularExpression Id. */
  int SEMICOLON = 71;
  /** RegularExpression Id. */
  int COMMA = 72;
  /** RegularExpression Id. */
  int COLON = 73;
  /** RegularExpression Id. */
  int LEFT_PAREN = 74;
  /** RegularExpression Id. */
  int RIGHT_PAREN = 75;
  /** RegularExpression Id. */
  int RIGHT_BRACE = 76;
  /** RegularExpression Id. */
  int LEFT_BRACE = 77;
  /** RegularExpression Id. */
  int LEFT_BRACKET = 78;
  /** RegularExpression Id. */
  int RIGHT_BRACKET = 79;
  /** RegularExpression Id. */
  int HASH = 80;
  /** RegularExpression Id. */
  int EXCLAMATION = 81;
  /** RegularExpression Id. */
  int AMPERSAND = 82;
  /** RegularExpression Id. */
  int PIPE = 83;
  /** RegularExpression Id. */
  int DOT = 84;
  /** RegularExpression Id. */
  int IDENTIFIER = 85;
  /** RegularExpression Id. */
  int LETTER = 86;
  /** RegularExpression Id. */
  int DIGIT = 87;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 5>",
    "<token of kind 6>",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "\"while\"",
    "\"if\"",
    "\"else\"",
    "\"int\"",
    "\"return\"",
    "\"void\"",
    "\"main\"",
    "\"for\"",
    "\"do\"",
    "\"switch\"",
    "\"case\"",
    "\"break\"",
    "\"continue\"",
    "\"goto\"",
    "\"sizeof\"",
    "\"typedef\"",
    "\"struct\"",
    "\"union\"",
    "\"enum\"",
    "\"register\"",
    "\"auto\"",
    "\"extern\"",
    "\"static\"",
    "\"const\"",
    "\"volatile\"",
    "\"signed\"",
    "\"unsigned\"",
    "\"short\"",
    "\"long\"",
    "\"float\"",
    "\"double\"",
    "\"char\"",
    "\"default\"",
    "<_NUM_CHAR>",
    "<_ESCAPED_CHAR>",
    "<_TERM_START_CHAR>",
    "<_TERM_CHAR>",
    "<_WHITESPACE>",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"=\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"%=\"",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\";\"",
    "\",\"",
    "\":\"",
    "\"(\"",
    "\")\"",
    "\"}\"",
    "\"{\"",
    "\"[\"",
    "\"]\"",
    "\"#\"",
    "\"!\"",
    "\"&\"",
    "\"|\"",
    "\".\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
  };

}
