/* Generated By:JJTree&JavaCC: Do not edit this line. MiniCParser.java */
package com.mmdxiaoxin.minicservice.parser;
import com.mmdxiaoxin.minicservice.util.*;
import java.io.*;
import java.util.Scanner;
import java.util.HashMap;
import java.util.Map;

public class MiniCParser/*@bgen(jjtree)*/implements MiniCParserTreeConstants, MiniCParserConstants {/*@bgen(jjtree)*/
  protected JJTMiniCParserState jjtree = new JJTMiniCParserState();public QTList qtList = new QTList();

  public StatementType statementType = new StatementType();

  public VariableTable variableTable = new VariableTable();

  public void printQTTable(char [] buffer, FileWriter fos)
  {
    try
    {
      qtList.printQTTable(fos);
    }
    catch (Exception e)
    {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
    }
  }

  public String printQTTable()
  {
    System.out.println(qtList.printQTTable());
    return qtList.printQTTable();
  }

  public Map < String, String > processing(String code)
  {
    Map < String, String > result = new HashMap < String, String > ();
    InputStream lexicalStream = new ByteArrayInputStream(code.getBytes());
    InputStream syntaxStream = new ByteArrayInputStream(code.getBytes());
    try
    {
      // �ʷ�����
      SimpleCharStream stream = new SimpleCharStream(lexicalStream);
      MiniCParserTokenManager tokenManager = new MiniCParserTokenManager(stream);
      StringBuilder lexicalResult = new StringBuilder();
      Token token = tokenManager.getNextToken();
      int index = 0;
      while (token.kind != 0)
      {
        lexicalResult.append(++index).append(": ").append("(").append(token.kind).append(", ").append(token.image).append(")\u005cn");
        token = tokenManager.getNextToken();
      }
      result.put("lexicalAnalysis", lexicalResult.toString());
      // �﷨����
      StringBuilder syntaxResult = new StringBuilder();
      MiniCParser miniCParser = new MiniCParser(syntaxStream);
      SimpleNode n = miniCParser.Start();
      syntaxResult.append(n.dump("->"));
      syntaxResult.append("\u8c22\u8c22\u3002\u005cn\u005cn");
      result.put("syntaxAnalysis", syntaxResult.toString());
      // �������
      StringBuilder semanticResult = new StringBuilder();
      semanticResult.append(miniCParser.printQTTable());
      result.put("semanticAnalysis", semanticResult.toString());
    }
    catch (ParseException e)
    {
      result.put("syntaxAnalysis", "\u8bed\u6cd5\u5206\u6790\u9519\u8bef\uff1a" + e.getMessage());
    }
    finally
    {
      closeStream(lexicalStream);
      closeStream(syntaxStream);
    }
    return result;
  }

  private void closeStream(InputStream stream)
  {
    try
    {
      stream.close();
    }
    catch (IOException e)
    {
      e.printStackTrace(); // ����ر���ʱ���쳣
    }
  }

  public static void main(String args [])
  {
    try
    {
      // �����ļ�ID
      Scanner scanner = new Scanner(System.in);
      System.out.print("Enter input file nameID (input*.txt): ");
      String inputFileID = scanner.nextLine();
      FileReader reader = new FileReader("input" + inputFileID + ".txt");
      FileReader reader1 = new FileReader("input" + inputFileID + ".txt");
      File outFile = new File("output" + inputFileID + ".txt");
      FileWriter fos = new FileWriter(outFile);
      char [] buffer = new char [1000];
      MiniCParser parser = new MiniCParser(reader);
      // �ʷ�����
      Token token = null;
      SimpleCharStream stream = new SimpleCharStream(reader1);
      MiniCParserTokenManager tokenManager = new MiniCParserTokenManager(stream);
      token = tokenManager.getNextToken();
      System.out.println("\u8bcd\u6cd5\u5206\u6790:\u005cn");
      String st = new String("\u8bcd\u6cd5\u5206\u6790:\u005cn");
      buffer = st.toCharArray();
      fos.write(buffer);
      while (token.kind != 0)
      {
        System.out.println("(" + token.kind + ", " + token.image + ")");
        st = new String("( " + token.kind + "," + token.image + " )" + "\u005cn");
        buffer = st.toCharArray();
        fos.write(buffer);
        token = tokenManager.getNextToken();
      }
      System.out.println("\u005cn");
      // �﷨����
      System.out.println("\u8bed\u6cd5\u5206\u6790: ");
      st = new String("\u005cn\u8bed\u6cd5\u5206\u6790:\u005cn");
      buffer = st.toCharArray();
      fos.write(buffer);
      SimpleNode n = parser.Start();
      n.dump("", buffer, fos);
      st = new String("Thank you.\u005cn\u005cn");
      buffer = st.toCharArray();
      fos.write(buffer); // д���ļ�
      System.out.println("Thank you.");
      System.out.println("\u005cn");
      // �������
      System.out.println("\u8bed\u4e49\u5206\u6790: \u005cn");
      st = new String("\u8bed\u4e49\u5206\u6790: \u005cn");
      buffer = st.toCharArray();
      fos.write(buffer);
      parser.printQTTable(buffer, fos);
      parser.printQTTable();
      fos.close();
    }
    catch (Exception e)
    {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
    }
  }

  final public SimpleNode Start() throws ParseException {
 /*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Program();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void Program() throws ParseException {
 /*@bgen(jjtree) Program */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_1;
        }
        FunctionSatement();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOID:
        jj_consume_token(VOID);
        break;
      case INT:
        jj_consume_token(INT);
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(MAIN);
      jj_consume_token(LEFT_PAREN);
      jj_consume_token(RIGHT_PAREN);
      jj_consume_token(LEFT_BRACE);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WHILE:
        case IF:
        case INT:
        case RETURN:
        case VOID:
        case FOR:
        case DO:
        case SWITCH:
        case SHORT:
        case LONG:
        case FLOAT:
        case DOUBLE:
        case CHAR:
        case LEFT_BRACE:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        StatementBlock();
      }
      jj_consume_token(RIGHT_BRACE);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void FunctionSatement() throws ParseException {
 /*@bgen(jjtree) FunctionSatement */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCTIONSATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      TypeSpecifier();
      parseIdentifier();
      jj_consume_token(LEFT_PAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case VOID:
      case SHORT:
      case LONG:
      case FLOAT:
      case DOUBLE:
      case CHAR:
        TypeSpecifier();
        parseIdentifier();
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[2] = jj_gen;
            break label_3;
          }
          jj_consume_token(COMMA);
          TypeSpecifier();
          parseIdentifier();
        }
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      jj_consume_token(RIGHT_PAREN);
      jj_consume_token(LEFT_BRACE);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WHILE:
        case IF:
        case INT:
        case RETURN:
        case VOID:
        case FOR:
        case DO:
        case SWITCH:
        case SHORT:
        case LONG:
        case FLOAT:
        case DOUBLE:
        case CHAR:
        case LEFT_BRACE:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_4;
        }
        StatementBlock();
      }
      jj_consume_token(RIGHT_BRACE);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public String TypeSpecifier() throws ParseException {
 /*@bgen(jjtree) TypeSpecifier */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPESPECIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token token = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        token = jj_consume_token(INT);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return token.image;}
        break;
      case DOUBLE:
        token = jj_consume_token(DOUBLE);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return token.image;}
        break;
      case VOID:
        token = jj_consume_token(VOID);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return token.image;}
        break;
      case FLOAT:
        token = jj_consume_token(FLOAT);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return token.image;}
        break;
      case CHAR:
        token = jj_consume_token(CHAR);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return token.image;}
        break;
      case LONG:
        token = jj_consume_token(LONG);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return token.image;}
        break;
      case SHORT:
        token = jj_consume_token(SHORT);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return token.image;}
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void StatementBlock() throws ParseException {
 /*@bgen(jjtree) StatementBlock */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHILE:
      case IF:
      case INT:
      case RETURN:
      case VOID:
      case FOR:
      case DO:
      case SWITCH:
      case SHORT:
      case LONG:
      case FLOAT:
      case DOUBLE:
      case CHAR:
      case IDENTIFIER:
        Statement();
        break;
      case LEFT_BRACE:
        jj_consume_token(LEFT_BRACE);
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case WHILE:
          case IF:
          case INT:
          case RETURN:
          case VOID:
          case FOR:
          case DO:
          case SWITCH:
          case SHORT:
          case LONG:
          case FLOAT:
          case DOUBLE:
          case CHAR:
          case LEFT_BRACE:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[6] = jj_gen;
            break label_5;
          }
          StatementBlock();
        }
        jj_consume_token(RIGHT_BRACE);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Statement() throws ParseException {
 /*@bgen(jjtree) Statement */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case RETURN:
      case VOID:
      case SHORT:
      case LONG:
      case FLOAT:
      case DOUBLE:
      case CHAR:
      case IDENTIFIER:
        SequenceStatement();
        break;
      case IF:
        ConditionStatement();
        break;
      case WHILE:
        WhileStatement();
        break;
      case DO:
        DoWhileStatement();
        break;
      case SWITCH:
        SwitchCStatement();
        break;
      case FOR:
        ForStatement();
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SequenceStatement() throws ParseException {
 /*@bgen(jjtree) SequenceStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTSEQUENCESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case VOID:
      case SHORT:
      case LONG:
      case FLOAT:
      case DOUBLE:
      case CHAR:
        DeclarationStatement();
        jj_consume_token(SEMICOLON);
        break;
      case IDENTIFIER:
        AssignmentStatement();
        jj_consume_token(SEMICOLON);
        break;
      case RETURN:
        ReturnStatement();
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ReturnStatement() throws ParseException {
 /*@bgen(jjtree) ReturnStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTRETURNSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RETURN);
      Expression();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void DeclarationStatement() throws ParseException {
 /*@bgen(jjtree) DeclarationStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARATIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token identifierToken = null;
  Variable variableEntry = new Variable();
  String ty = null;
    try {
      ty = TypeSpecifier();
      identifierToken = parseIdentifier();
    variableEntry = new Variable(ty, String.valueOf(identifierToken));
    variableTable.addWithCheck(variableEntry);
    statementType.setVariableTable(variableTable);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_6;
        }
        jj_consume_token(COMMA);
        identifierToken = parseIdentifier();
      variableEntry = new Variable(ty, String.valueOf(identifierToken));
      variableTable.addWithCheck(variableEntry);
      statementType.setVariableTable(variableTable);
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void AssignmentStatement() throws ParseException {
 /*@bgen(jjtree) AssignmentStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGNMENTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String str1 = null;
  String str2 = null;
  Token assignmentOperator, identifierToken;
  Variable variableEntry = new Variable();
    try {
      identifierToken = parseIdentifier();
    str1 = identifierToken.image;
    variableEntry = variableTable.variableExist(str1);
    if (variableEntry == null)
    {
      System.out.println("\u53d8\u91cf" + str1 + "\u672a\u5b9a\u4e49");
    }
      assignmentOperator = jj_consume_token(ASSIGN);
      str2 = Expression();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    QTInfo qt = new QTInfo(assignmentOperator.image, str2, "_", str1);
    qtList.addQTInfo(qt);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void AssignmentSentence2() throws ParseException {
 /*@bgen(jjtree) AssignmentSentence2 */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGNMENTSENTENCE2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String str2 = null;
  String str1 = null;
  Token assignmentOperator, identifierToken;
  Variable variableEntry = new Variable();
    try {
      identifierToken = parseIdentifier();
    str1 = identifierToken.image;
    variableEntry = variableTable.variableExist(str1);
    if (variableEntry == null)
    {
      System.out.println("\u53d8\u91cf" + str1 + "\u672a\u5b9a\u4e49");
    }
      assignmentOperator = jj_consume_token(ASSIGN);
      str2 = Expression();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    QTInfo qt = new QTInfo(assignmentOperator.image, str2, "_", str1);
    qtList.addQTInfo(qt);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public ConditionValue ORExpression() throws ParseException {
 /*@bgen(jjtree) ORExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);ConditionValue c1;
  ConditionValue c2;
    try {
      c1 = ANDExpression();
    c2 = c1;
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OR:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_7;
        }
        jj_consume_token(OR);
      c1.backpatchFalseChain(QTInfo.size + 1);
        c2 = ANDExpression();
      c2.mergeTrue(c1);
      c1 = c2;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return c2;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public ConditionValue ANDExpression() throws ParseException {
 /*@bgen(jjtree) ANDExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTANDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);ConditionValue e1, e2 = null;
  Token rop = null;
    try {
      e1 = NOTExpression();
    e2 = e1;
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_8;
        }
        rop = jj_consume_token(AND);
      e1.backpatchTrueChain(QTInfo.size + 1);
        e2 = NOTExpression();
      e2.mergeFalse(e1);
      e1 = e2;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return e2;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public ConditionValue NOTExpression() throws ParseException {
 /*@bgen(jjtree) NOTExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTNOTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);ConditionValue c1;
  ConditionValue c2 = new ConditionValue();
  boolean flag = true;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        jj_consume_token(NOT);
    flag = false;
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      c1 = RelationExpression();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if (!flag)
    {
      c2.trueChain = c1.falseChain;
      c2.falseChain = c1.trueChain;
      {if (true) return c2;}
    }
    {if (true) return c1;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public ConditionValue RelationExpression() throws ParseException {
 /*@bgen(jjtree) RelationExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTRELATIONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String e1, e2 = null;
  Token rop = null;
  ConditionValue chain = new ConditionValue();
    try {
      e1 = Expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LESS_THAN:
      case LESS_THAN_EQUAL:
      case GREATER_THAN:
      case GREATER_THAN_EQUAL:
        rop = Rop();
        e2 = Expression();
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
    if (rop != null)
    {
      QTInfo info = new QTInfo("j" + rop, e1, e2, "T");
      qtList.addQTInfo(info);
      chain.mergeTrue(info);
    }
    else
    {
      QTInfo info = new QTInfo("jnz", e1, "_", "T");
      qtList.addQTInfo(info);
      chain.mergeTrue(info);
    }
    QTInfo info = new QTInfo("j", "_", "_", "F");
    qtList.addQTInfo(info);
    chain.mergeFalse(info);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return chain;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void ConditionStatement() throws ParseException {
 /*@bgen(jjtree) ConditionStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDITIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);ConditionValue cValue = new ConditionValue();
  int index;
    try {
      jj_consume_token(IF);
      jj_consume_token(LEFT_PAREN);
      cValue = ORExpression();
      jj_consume_token(RIGHT_PAREN);
    cValue.backpatchTrueChain(QTInfo.size + 1);
      StatementBlock();
    cValue.backpatchFalseChain(QTInfo.size + 1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
      QTInfo qtInfo = new QTInfo("j", "_", "_", "F");
      index = QTInfo.size;
      qtList.addQTInfo(qtInfo);
      cValue.backpatchFalseChain(QTInfo.size + 1);
        StatementBlock();
      qtInfo = qtList.get(index - 1);
      qtInfo.setResult(QTInfo.size + 1);
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void WhileStatement() throws ParseException {
 /*@bgen(jjtree) WhileStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);ConditionValue cValue = new ConditionValue();
  int index;
    try {
      jj_consume_token(WHILE);
      jj_consume_token(LEFT_PAREN);
    index = QTInfo.size + 1;
      cValue = ORExpression();
      jj_consume_token(RIGHT_PAREN);
    cValue.backpatchTrueChain(QTInfo.size + 1);
      StatementBlock();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    QTInfo qtInfo = new QTInfo("j", "_", "_", index);
    qtList.addQTInfo(qtInfo);
    cValue.backpatchFalseChain(QTInfo.size + 1);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public Token Rop() throws ParseException {
 /*@bgen(jjtree) Rop */
  SimpleNode jjtn000 = new SimpleNode(JJTROP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token token = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LESS_THAN:
        token = jj_consume_token(LESS_THAN);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return token;}
        break;
      case LESS_THAN_EQUAL:
        token = jj_consume_token(LESS_THAN_EQUAL);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return token;}
        break;
      case GREATER_THAN:
        token = jj_consume_token(GREATER_THAN);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return token;}
        break;
      case GREATER_THAN_EQUAL:
        token = jj_consume_token(GREATER_THAN_EQUAL);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return token;}
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public String Expression() throws ParseException {
 /*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String s = null;
    try {
      s = AdditiveExpression();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return s;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public String AdditiveExpression() throws ParseException {
 /*@bgen(jjtree) AdditiveExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTADDITIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String a = null;
  String b = null;
  String result = null;
  Token token = null;
    try {
      a = MultiplicativeExpression();
    result = a;
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ADD:
        case SUBTRACT:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_9;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ADD:
          token = jj_consume_token(ADD);
          break;
        case SUBTRACT:
          token = jj_consume_token(SUBTRACT);
          break;
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        b = MultiplicativeExpression();
      result = VariableNameGenerator.genVariableName();
      QTInfo qtInfo = new QTInfo(token.image, a, b, result);
      qtList.addQTInfo(qtInfo);
      a = result;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return result;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public String MultiplicativeExpression() throws ParseException {
 /*@bgen(jjtree) MultiplicativeExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTMULTIPLICATIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String a = null;
  String b = null;
  String result = null;
  Token token = null;
    try {
      a = UnaryExpression();
    result = a;
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULTIPLY:
        case DIVIDE:
        case MODULO:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_10;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULTIPLY:
          token = jj_consume_token(MULTIPLY);
          break;
        case DIVIDE:
          token = jj_consume_token(DIVIDE);
          break;
        case MODULO:
          token = jj_consume_token(MODULO);
          break;
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        b = UnaryExpression();
      result = VariableNameGenerator.genVariableName();
      QTInfo qtInfo = new QTInfo(token.image, a, b, result);
      qtList.addQTInfo(qtInfo);
      a = result;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return result;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public String UnaryExpression() throws ParseException {
 /*@bgen(jjtree) UnaryExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String str = null;
  Token identifierToken = null;
  Variable variableEntry = new Variable();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_PAREN:
        jj_consume_token(LEFT_PAREN);
        str = Expression();
        jj_consume_token(RIGHT_PAREN);
        break;
      case IDENTIFIER:
        identifierToken = parseIdentifier();
      str = identifierToken.image;
      variableEntry = variableTable.variableExist(str);
      if (variableEntry == null)
      {
        System.out.println("\u53d8\u91cf" + str + "\u672a\u5b9a\u4e49");
      }
        break;
      case INTEGER_LITERAL:
        str = parseInteger();
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return str;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public Token parseIdentifier() throws ParseException {
 /*@bgen(jjtree) parseIdentifier */
  SimpleNode jjtn000 = new SimpleNode(JJTPARSEIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token token = null;
    try {
      token = jj_consume_token(IDENTIFIER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return token;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public String parseInteger() throws ParseException {
 /*@bgen(jjtree) parseInteger */
  SimpleNode jjtn000 = new SimpleNode(JJTPARSEINTEGER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token token = null;
    try {
      token = jj_consume_token(INTEGER_LITERAL);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return token.image;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void SwitchCStatement() throws ParseException {
 /*@bgen(jjtree) SwitchCStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTSWITCHCSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);ConditionValue Value = new ConditionValue();
  String str1 = null;
  String str2 = null;
  int qtSize = QTInfo.size;
  Token tok;
  Token tokx;
    try {
      jj_consume_token(SWITCH);
      jj_consume_token(LEFT_PAREN);
      tok = parseIdentifier();
      jj_consume_token(RIGHT_PAREN);
      jj_consume_token(LEFT_BRACE);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CASE:
          ;
          break;
        default:
          jj_la1[22] = jj_gen;
          break label_11;
        }
        jj_consume_token(CASE);
        tokx = jj_consume_token(INTEGER_LITERAL);
      QTInfo qt1;
      if (tokx != null)
      {
        qt1 = new QTInfo("case", tok.image, tokx.image, QTInfo.size + 3);
        qtList.addQTInfo(qt1);
        Value.backpatchFalseChain(QTInfo.size);
        Value = new ConditionValue();
      }
      else
      {
        qt1 = new QTInfo("Jnz", tok.image, "_", QTInfo.size + 3);
        qtList.addQTInfo(qt1);
      }
      QTInfo qt2 = new QTInfo("J", "_", "_", "F");
      qtList.addQTInfo(qt2);
      Value.mergeFalse(qt2);
      Value.backpatchFalseChain(QTInfo.size + 2);
        jj_consume_token(COLON);
        label_12:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case WHILE:
          case IF:
          case INT:
          case RETURN:
          case VOID:
          case FOR:
          case DO:
          case SWITCH:
          case SHORT:
          case LONG:
          case FLOAT:
          case DOUBLE:
          case CHAR:
          case LEFT_BRACE:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[23] = jj_gen;
            break label_12;
          }
          StatementBlock();
        }
        jj_consume_token(BREAK);
        jj_consume_token(SEMICOLON);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DFLT:
        jj_consume_token(DFLT);
        jj_consume_token(COLON);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WHILE:
        case IF:
        case INT:
        case RETURN:
        case VOID:
        case FOR:
        case DO:
        case SWITCH:
        case SHORT:
        case LONG:
        case FLOAT:
        case DOUBLE:
        case CHAR:
        case LEFT_BRACE:
        case IDENTIFIER:
          StatementBlock();
          break;
        default:
          jj_la1[24] = jj_gen;
          ;
        }
        jj_consume_token(BREAK);
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[25] = jj_gen;
        ;
      }
      jj_consume_token(RIGHT_BRACE);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void DoWhileStatement() throws ParseException {
 /*@bgen(jjtree) DoWhileStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTDOWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);int QTSize = QTInfo.size;
  ConditionValue Value = null;
  String str1 = null;
  String str2 = null;
  Token assignmentOperator = null;
    try {
      jj_consume_token(DO);
      StatementBlock();
      jj_consume_token(WHILE);
      jj_consume_token(LEFT_PAREN);
      Value = ORExpression();
      jj_consume_token(RIGHT_PAREN);
      jj_consume_token(SEMICOLON);
    Value.backpatchTrueChain(QTSize + 1);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    Value.backpatchFalseChain(QTInfo.size + 1);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ForStatement() throws ParseException {
 /*@bgen(jjtree) ForStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTFORSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);ConditionValue cValue = new ConditionValue();
  int index;
    try {
      jj_consume_token(FOR);
      jj_consume_token(LEFT_PAREN);
    index = QTInfo.size + 1;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case VOID:
      case SHORT:
      case LONG:
      case FLOAT:
      case DOUBLE:
      case CHAR:
      case IDENTIFIER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
        case VOID:
        case SHORT:
        case LONG:
        case FLOAT:
        case DOUBLE:
        case CHAR:
          DeclarationStatement();
          break;
        case IDENTIFIER:
          AssignmentSentence2();
          break;
        default:
          jj_la1[26] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
      cValue = RelationExpression();
      jj_consume_token(SEMICOLON);
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INCREMENT:
        case DECREMENT:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[28] = jj_gen;
          break label_13;
        }
        if (jj_2_2(2)) {
          SelfIncreasing();
      qtList.addQTInfo(new QTInfo("J", "_", "_", index));
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            AssignmentSentence2();
            break;
          default:
            jj_la1[29] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      jj_consume_token(RIGHT_PAREN);
    cValue.backpatchTrueChain(QTInfo.size + 1);
      StatementBlock();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    QTInfo qtInfo = new QTInfo("j", "_", "_", index);
    qtList.addQTInfo(qtInfo);
    cValue.backpatchFalseChain(QTInfo.size + 1);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SelfIncreasing() throws ParseException {
 /*@bgen(jjtree) SelfIncreasing */
  SimpleNode jjtn000 = new SimpleNode(JJTSELFINCREASING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token id;
  Token op;
  String temp;
  Variable variableEntry = new Variable();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        id = parseIdentifier();
      if (variableTable.variableExist(id.image) == variableEntry)
      {
        System.out.println("\u53d8\u91cf" + id.image + "\u672a\u5b9a\u4e49,\u9519\u8bef\u5728" + id.endLine + "\u884c," + id.endColumn + "\u5217");
      }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INCREMENT:
          op = jj_consume_token(INCREMENT);
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
        temp = VariableNameGenerator.genVariableName();
        qtList.addQTInfo(new QTInfo("+", id.image, "1", temp));
        qtList.addQTInfo(new QTInfo("=", temp, "_", id.image));
          break;
        case DECREMENT:
          op = jj_consume_token(DECREMENT);
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
        temp = VariableNameGenerator.genVariableName();
        qtList.addQTInfo(new QTInfo("-", id.image, "1", temp));
        qtList.addQTInfo(new QTInfo("=", temp, "_", id.image));
          break;
        default:
          jj_la1[30] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case INCREMENT:
      case DECREMENT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INCREMENT:
          op = jj_consume_token(INCREMENT);
          break;
        case DECREMENT:
          op = jj_consume_token(DECREMENT);
          id = parseIdentifier();
      if (variableTable.variableExist(id.image) == variableEntry)
      {
        System.out.println("\u53d8\u91cf" + id.image + "\u672a\u5b9a\u4e49,\u9519\u8bef\u5728" + id.endLine + "\u884c," + id.endColumn + "\u5217");
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      temp = VariableNameGenerator.genVariableName();
      qtList.addQTInfo(new QTInfo("+", id.image, "1", temp));
      qtList.addQTInfo(new QTInfo("=", temp, "_", id.image));
          break;
        default:
          jj_la1[31] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(DECREMENT)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_3R_29()) return true;
    }
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_scan_token(DECREMENT)) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_3R_16()) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_scan_token(SHORT)) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(INCREMENT)) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_scan_token(LONG)) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_3R_17()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) return true;
    }
    return false;
  }

  private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) return true;
    }
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public MiniCParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[33];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1400,0x1dd80,0x0,0x1400,0x1dd80,0x1400,0x1dd80,0x1dd80,0x1dd80,0x1c00,0x0,0x0,0x0,0x0,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x1dd80,0x1dd80,0x0,0x1400,0x1400,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x7c,0x0,0x7c,0x7c,0x7c,0x7c,0x7c,0x7c,0x7c,0x0,0x10000000,0x20000000,0x40000000,0x7800000,0x0,0x7800000,0xc00,0xc00,0x7000,0x7000,0x0,0x0,0x7c,0x7c,0x80,0x7c,0x7c,0x600000,0x0,0x600000,0x600000,0x600000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x100020,0x1,0x0,0x100020,0x0,0x100020,0x100020,0x100000,0x100000,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x101004,0x0,0x100020,0x100020,0x0,0x100000,0x100000,0x100000,0x100000,0x0,0x0,0x100000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MiniCParser(InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MiniCParser(InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MiniCParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MiniCParser(Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MiniCParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MiniCParser(MiniCParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MiniCParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[87];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 33; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 87; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
